
*** AULA01
*criar perojeto na linha de comando
mvn archetype:generate -DartifactId=produtos -DgroupId=br.com.alura.maven -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-quickstart

mvn archetype:generate -DartifactId=produtos -DgroupId=br.com.alura.maven -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-quickstart
*compilar o projeto
mvn compile
*Compilar o teste
mvn test

*relatorio
Utilizando o plugin surefire-report para gerar relatorio .html:
 mvn surefire-report:report
gera no diretorio target\surefire

*O maven pode empacotar em .jar (que é o goal informado no pom.xml <packaging>jar</packaging>) utilizando o geuinte comando:
mvn package

*** AULA02 - Maven no eclipse
importar projeto maven no eclipse
adicionar dependencias utilizando o maven repository

http://mvnrepository.com/

*** AULA03 - Repositorio remoto e local
Repositorio local:

No Windows, o diret�rio deve ficar dentro do diret�rio de seu usu�rio, .m2 e repository.

J� em sistemas Linux, voc� deve encontrar um diret�rio "invis�vel" (devido ao ponto na frente) na Home do usu�rio, chamado .m2, dentro do qual estar� o repository.

Para executar o maven offline sem checar atualiza��es das depend�ncias:

mvn -o <comando goal>

Repositorio central do maven (remoto)
http://repo.maven.apache.org/maven2/

� onde fica localizado todo os arquivos que trabalham com o maven, � daqui que os arquivos s�o copiados.

O maven possue um repositorio local, quando cria um novo projeto via linha de comando por exemplo, o mven n�o baixa por exemplo o junit
novamente, por que ele j� existe no repositorio local.

O maven baixa do repositorio remoto para o repositorio local

Para adicionar o endere�o de um novo repositorio basta adicionar 
<repositories>
ver link https://maven.apache.org/pom.html

A vantagem de se manter um reposit�rio local � que � poss�vel realizar um cache entre v�rios projetos que utilizam o Maven. Dessa forma, tudo que j� estiver salvo no reposit�rio local � utilizado e compartilhado, n�o sendo necess�rio realizar novos downloads.

Vale lembrar que o reposit�rio local fica dispon�vel na pasta do usu�rio, e por esse motivo n�o estar� dispon�vel para diferentes usu�rios de um mesmo computador.

*** AULA04 - Relatorios de qualidade e cobertura

* Fases do maven

A Build Lifecycle is Made Up of Phases
Each of these build lifecycles is defined by a different list of build phases, wherein a build phase represents a stage in the lifecycle.

For example, the default lifecycle comprises of the following phases (for a complete list of the lifecycle phases, refer to the Lifecycle Reference):

validate - validate the project is correct and all necessary information is available
compile - compile the source code of the project
test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package - take the compiled code and package it in its distributable format, such as a JAR.
verify - run any checks on results of integration tests to ensure quality criteria are met
install - install the package into the local repository, for use as a dependency in other projects locally
deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.
These lifecycle phases (plus the other lifecycle phases not shown here) are executed sequentially to complete the default lifecycle. Given the lifecycle phases above, this means that when the default lifecycle is used, Maven will first validate the project, then will try to compile the sources, run those against the tests, package the binaries (e.g. jar), run integration tests against that package, verify the integration tests, install the verified package to the local repository, then deploy the installed package to a remote repository.

Cada fase executa a fase anterior.
Esmiu�ando as fases:

1. Valida��o: verificamos se projeto possui todas as informa��es necess�rias

2. Compila��o: compilar os conte�dos

3. Teste: realizar testes diferentes no projeto

4. Pacote: gera��o de um pacote do projeto

5. Teste de integra��o: realizar testes de integra��o

6. Verifica��o: checagem do pacote gerado

7. Instala��o: realizar a instala��o do pacote no reposit�rio local

8. Implanta��o: realizar a implanta��o no ambiente adequado

Podemos for�ar a ordem de etapas com op��es da linha de comando, como n�o gerar testes, por meio do comando -DskipTests=true:

mvn -DskipTests=true package

* Incluindo plugins
Comando do plugin pmd:
pmd:pmd 
gera apenas um report das viola��es

Gera no diret�rio:
produtos/target/site/pmd.html

Report com as viola��es encontradas no fonte

Utilizando o comando pmd:check (roda pmd:pmd antes)
Gera o relat�rio e N�O deixa passar a compila��o emquanto os problemas n�o forem corrigidos, 
conforme regras pr� determinadas. VErifica se o report � valido ou n�o.

O goal pmd:check se relaciona � fase verify.

https://maven.apache.org/plugins/maven-pmd-plugin/check-mojo.html

*** AULA05 - Criando projeto web - 
Baixar a api da servlet
configurar o wev.xml com a vers�o da servlet

Baixando api servlet e configurando web xml com a versao da servlet

mvn package 
gera o arquivo war ou jar conforme pom
para listar os dados do arquivo
unzip -l  <nomearquivo>

*** AULA06 - Projeto web
O escope abaixo indica que esta disponivel para compilar e rodar os testes
      <scope>test</scope>

O escopo compile � o default, esta disponivel para compilar e quem depender tambem tera ele disponivel (em tempo de execu��o) 
Ou seja quem precisa da loja web, precisa do stella e da sevlet api

* Inserindo produto como dependencia
No pom da loja =web podemos incluir a dependencia do projeto produto, dentro do eclipse ir� funcionar, mas se houver necesidade de 
rodar aplica��o fora do eclipse, ao executar maven package,acontecer� erro pq o produtos.jar n�o est� instalado, � preciso instala-lo 
para rodar o maven package por fora.
      <scope>compile</scope>
*** IMPORTANTE ***
Quando o projeto produtos é instalado as classes de testes são removidas

Se o projeto que você precisa na dependencia esta no eclipse, ele adicina o link para esse projeto, caso contrário faz o link com o .jar 
do repositorio local.

Se você não possui o projeto no eclipse, as coisas funcionam como deveria funcionar, caso contrário o eclipse 
tenta fazer o link com o projeto.

Cuidar para não acessar classes de teste por exemplo, pq na produção estas classes NÃO são empacotadas.

O <scope>provided</scope> indica que é usado para compilar, no entatno, o servidor fornecessa lib, consequentemente não precisa ir no pacode para produção.
Lembrar de executar o clean antes de executar o package, para evitar que uma dependencia que tenha sido removida continue no package

Sintetizando:
<scope>provided</scope> -> pra compilar eu quero, pra rodar não, o servidor irá fornecer;
<scope>compile</scope> -> default pra compilar e rodar
<scope>runtime</scope> -> só em tempo de execução, runtime, quero só pra rodar

O escopo compile indica que a dependência estará disponível em todos os classpaths: de compilação de teste e execução. Esse é o escopo padrão utilizado quando não declaramos um escopo na dependência.
O escopo de runtime indica que não necessitamos da dependência para compilar. A dependência estará disponível no classpath de runtime, o que significa que utilizaremos a dependência na execução do projeto. A dependência também estará disponível no classpath de testes.

Tomar cuidado com o runtime, pq ele fica disponivel no eclipse para rodar, no entanto permite que adicione 
código desta biblioteca que ao gerar o compile do maven o erro de execução estoura.
É possivel excluir dependenciar dentro das bibliotecas jar utilizando exclusions.




